// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        (unknown)
// source: framebuffer.proto

package framebuffer

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
//Layer defines some default layers for compositing animations onto for
//various purposes.
type Layer int32

const (
	Layer_NONE Layer = 0
	// Well-known layers
	Layer_LIGHT         Layer = 1
	Layer_COLOR         Layer = 2
	Layer_NOTIFICATIONS Layer = 8
	Layer_PRIORITY      Layer = 9
)

// Enum value maps for Layer.
var (
	Layer_name = map[int32]string{
		0: "NONE",
		1: "LIGHT",
		2: "COLOR",
		8: "NOTIFICATIONS",
		9: "PRIORITY",
	}
	Layer_value = map[string]int32{
		"NONE":          0,
		"LIGHT":         1,
		"COLOR":         2,
		"NOTIFICATIONS": 8,
		"PRIORITY":      9,
	}
)

func (x Layer) Enum() *Layer {
	p := new(Layer)
	*p = x
	return p
}

func (x Layer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layer) Descriptor() protoreflect.EnumDescriptor {
	return file_framebuffer_proto_enumTypes[0].Descriptor()
}

func (Layer) Type() protoreflect.EnumType {
	return &file_framebuffer_proto_enumTypes[0]
}

func (x Layer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layer.Descriptor instead.
func (Layer) EnumDescriptor() ([]byte, []int) {
	return file_framebuffer_proto_rawDescGZIP(), []int{0}
}

//
//FrameData represents an ARGB array of dots.
type FrameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ARGB
	Dots []uint32 `protobuf:"fixed32,1,rep,packed,name=dots,proto3" json:"dots,omitempty"`
}

func (x *FrameData) Reset() {
	*x = FrameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framebuffer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameData) ProtoMessage() {}

func (x *FrameData) ProtoReflect() protoreflect.Message {
	mi := &file_framebuffer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameData.ProtoReflect.Descriptor instead.
func (*FrameData) Descriptor() ([]byte, []int) {
	return file_framebuffer_proto_rawDescGZIP(), []int{0}
}

func (x *FrameData) GetDots() []uint32 {
	if x != nil {
		return x.Dots
	}
	return nil
}

//
//FrameBuffer represents an entire frame together with a layer tag. It also
//defines a timestamp that can be used within a FrameSequence to define the
//duration a frame will be shown.
type FrameBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame *FrameData `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	// Time offset from start of frame in milliseconds
	Timestamp uint32 `protobuf:"fixed32,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Layer to apply the frame to
	Layer Layer `protobuf:"varint,3,opt,name=layer,proto3,enum=Layer" json:"layer,omitempty"`
}

func (x *FrameBuffer) Reset() {
	*x = FrameBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framebuffer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameBuffer) ProtoMessage() {}

func (x *FrameBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_framebuffer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameBuffer.ProtoReflect.Descriptor instead.
func (*FrameBuffer) Descriptor() ([]byte, []int) {
	return file_framebuffer_proto_rawDescGZIP(), []int{1}
}

func (x *FrameBuffer) GetFrame() *FrameData {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *FrameBuffer) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FrameBuffer) GetLayer() Layer {
	if x != nil {
		return x.Layer
	}
	return Layer_NONE
}

//
//FrameSequence buffers a series of frames to be drawn one by one at intervals
//defined by the timestamp included in the FrameBuffers. Useful for running
//smooth animations.
//
//In the future, this should have more metadata like looping counts and async
//animations.
type FrameSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames []*FrameBuffer `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
	// Number of times to loop the sequence
	Loop int32 `protobuf:"varint,2,opt,name=loop,proto3" json:"loop,omitempty"`
}

func (x *FrameSequence) Reset() {
	*x = FrameSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framebuffer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameSequence) ProtoMessage() {}

func (x *FrameSequence) ProtoReflect() protoreflect.Message {
	mi := &file_framebuffer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameSequence.ProtoReflect.Descriptor instead.
func (*FrameSequence) Descriptor() ([]byte, []int) {
	return file_framebuffer_proto_rawDescGZIP(), []int{2}
}

func (x *FrameSequence) GetFrames() []*FrameBuffer {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *FrameSequence) GetLoop() int32 {
	if x != nil {
		return x.Loop
	}
	return 0
}

type DrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DrawResponse) Reset() {
	*x = DrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framebuffer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawResponse) ProtoMessage() {}

func (x *DrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framebuffer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawResponse.ProtoReflect.Descriptor instead.
func (*DrawResponse) Descriptor() ([]byte, []int) {
	return file_framebuffer_proto_rawDescGZIP(), []int{3}
}

type LengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LengthRequest) Reset() {
	*x = LengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framebuffer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LengthRequest) ProtoMessage() {}

func (x *LengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_framebuffer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LengthRequest.ProtoReflect.Descriptor instead.
func (*LengthRequest) Descriptor() ([]byte, []int) {
	return file_framebuffer_proto_rawDescGZIP(), []int{4}
}

type LengthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint32 `protobuf:"fixed32,1,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *LengthResponse) Reset() {
	*x = LengthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_framebuffer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LengthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LengthResponse) ProtoMessage() {}

func (x *LengthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_framebuffer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LengthResponse.ProtoReflect.Descriptor instead.
func (*LengthResponse) Descriptor() ([]byte, []int) {
	return file_framebuffer_proto_rawDescGZIP(), []int{5}
}

func (x *LengthResponse) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

var File_framebuffer_proto protoreflect.FileDescriptor

var file_framebuffer_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x04,
	0x64, 0x6f, 0x74, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x06, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x22, 0x49, 0x0a, 0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x22, 0x0e, 0x0a, 0x0c,
	0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x0a, 0x0d,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a,
	0x0e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2a, 0x48, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x09, 0x32, 0x93, 0x01, 0x0a, 0x06, 0x44, 0x72, 0x61, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x09,
	0x44, 0x72, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x44, 0x72, 0x61, 0x77,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x0d, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x0e, 0x2e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_framebuffer_proto_rawDescOnce sync.Once
	file_framebuffer_proto_rawDescData = file_framebuffer_proto_rawDesc
)

func file_framebuffer_proto_rawDescGZIP() []byte {
	file_framebuffer_proto_rawDescOnce.Do(func() {
		file_framebuffer_proto_rawDescData = protoimpl.X.CompressGZIP(file_framebuffer_proto_rawDescData)
	})
	return file_framebuffer_proto_rawDescData
}

var file_framebuffer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_framebuffer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_framebuffer_proto_goTypes = []interface{}{
	(Layer)(0),             // 0: Layer
	(*FrameData)(nil),      // 1: FrameData
	(*FrameBuffer)(nil),    // 2: FrameBuffer
	(*FrameSequence)(nil),  // 3: FrameSequence
	(*DrawResponse)(nil),   // 4: DrawResponse
	(*LengthRequest)(nil),  // 5: LengthRequest
	(*LengthResponse)(nil), // 6: LengthResponse
}
var file_framebuffer_proto_depIdxs = []int32{
	1, // 0: FrameBuffer.frame:type_name -> FrameData
	0, // 1: FrameBuffer.layer:type_name -> Layer
	2, // 2: FrameSequence.frames:type_name -> FrameBuffer
	2, // 3: Drawer.DrawFrame:input_type -> FrameBuffer
	3, // 4: Drawer.DrawFrames:input_type -> FrameSequence
	5, // 5: Drawer.GetLength:input_type -> LengthRequest
	4, // 6: Drawer.DrawFrame:output_type -> DrawResponse
	4, // 7: Drawer.DrawFrames:output_type -> DrawResponse
	6, // 8: Drawer.GetLength:output_type -> LengthResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_framebuffer_proto_init() }
func file_framebuffer_proto_init() {
	if File_framebuffer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_framebuffer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framebuffer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framebuffer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framebuffer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framebuffer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_framebuffer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LengthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_framebuffer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_framebuffer_proto_goTypes,
		DependencyIndexes: file_framebuffer_proto_depIdxs,
		EnumInfos:         file_framebuffer_proto_enumTypes,
		MessageInfos:      file_framebuffer_proto_msgTypes,
	}.Build()
	File_framebuffer_proto = out.File
	file_framebuffer_proto_rawDesc = nil
	file_framebuffer_proto_goTypes = nil
	file_framebuffer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DrawerClient is the client API for Drawer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DrawerClient interface {
	// DrawFrame draws one frame
	DrawFrame(ctx context.Context, in *FrameBuffer, opts ...grpc.CallOption) (*DrawResponse, error)
	// DrawFrames draws a series of frames
	DrawFrames(ctx context.Context, in *FrameSequence, opts ...grpc.CallOption) (*DrawResponse, error)
	// GetLength returns the length of the strip
	GetLength(ctx context.Context, in *LengthRequest, opts ...grpc.CallOption) (*LengthResponse, error)
}

type drawerClient struct {
	cc grpc.ClientConnInterface
}

func NewDrawerClient(cc grpc.ClientConnInterface) DrawerClient {
	return &drawerClient{cc}
}

func (c *drawerClient) DrawFrame(ctx context.Context, in *FrameBuffer, opts ...grpc.CallOption) (*DrawResponse, error) {
	out := new(DrawResponse)
	err := c.cc.Invoke(ctx, "/Drawer/DrawFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drawerClient) DrawFrames(ctx context.Context, in *FrameSequence, opts ...grpc.CallOption) (*DrawResponse, error) {
	out := new(DrawResponse)
	err := c.cc.Invoke(ctx, "/Drawer/DrawFrames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drawerClient) GetLength(ctx context.Context, in *LengthRequest, opts ...grpc.CallOption) (*LengthResponse, error) {
	out := new(LengthResponse)
	err := c.cc.Invoke(ctx, "/Drawer/GetLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrawerServer is the server API for Drawer service.
type DrawerServer interface {
	// DrawFrame draws one frame
	DrawFrame(context.Context, *FrameBuffer) (*DrawResponse, error)
	// DrawFrames draws a series of frames
	DrawFrames(context.Context, *FrameSequence) (*DrawResponse, error)
	// GetLength returns the length of the strip
	GetLength(context.Context, *LengthRequest) (*LengthResponse, error)
}

// UnimplementedDrawerServer can be embedded to have forward compatible implementations.
type UnimplementedDrawerServer struct {
}

func (*UnimplementedDrawerServer) DrawFrame(context.Context, *FrameBuffer) (*DrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawFrame not implemented")
}
func (*UnimplementedDrawerServer) DrawFrames(context.Context, *FrameSequence) (*DrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawFrames not implemented")
}
func (*UnimplementedDrawerServer) GetLength(context.Context, *LengthRequest) (*LengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLength not implemented")
}

func RegisterDrawerServer(s *grpc.Server, srv DrawerServer) {
	s.RegisterService(&_Drawer_serviceDesc, srv)
}

func _Drawer_DrawFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameBuffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawerServer).DrawFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Drawer/DrawFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawerServer).DrawFrame(ctx, req.(*FrameBuffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drawer_DrawFrames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameSequence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawerServer).DrawFrames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Drawer/DrawFrames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawerServer).DrawFrames(ctx, req.(*FrameSequence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drawer_GetLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawerServer).GetLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Drawer/GetLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawerServer).GetLength(ctx, req.(*LengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Drawer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Drawer",
	HandlerType: (*DrawerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DrawFrame",
			Handler:    _Drawer_DrawFrame_Handler,
		},
		{
			MethodName: "DrawFrames",
			Handler:    _Drawer_DrawFrames_Handler,
		},
		{
			MethodName: "GetLength",
			Handler:    _Drawer_GetLength_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "framebuffer.proto",
}
